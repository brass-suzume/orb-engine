#pragma once

namespace core
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	class NoCopy
	{

	public:
		NoCopy() = default;

	private:
		NoCopy( const NoCopy& ) = delete;
		NoCopy& operator=( const NoCopy& ) = delete;
	};


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	template< typename TDest, typename TBase >
	std::weak_ptr< TDest > MakeMeWeak( const std::shared_ptr< TBase >& me )
	{
		return std::dynamic_pointer_cast< TDest >( me );
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	std::wstring ToWString( const std::string& str );
}